generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model applications {
  creatorid String @db.VarChar(255)
  owner     users  @relation(fields: [creatorid], references: [userid])

  name String @db.VarChar(255)
  logo String @default("/logo.png") @db.VarChar(255)

  token  String  @unique @db.VarChar(255)
  active Boolean @default(true)

  permissions String[] @default(["global.*"])
}

model plugins {
  id     Int    @id @default(autoincrement())
  postid String @db.VarChar(255)

  post posts @relation(fields: [postid], references: [postid])

  type String @db.VarChar(255)
  href String @db.VarChar(255)
}

model comments {
  creatorid String @db.VarChar(255)
  user      users  @relation(fields: [creatorid], references: [userid])

  caption String  @db.VarChar(255)
  image   String? @db.VarChar(255)

  post   posts  @relation(fields: [postid], references: [postid])
  postid String @db.VarChar(255)

  commentid String @id @unique @db.VarChar(255)
}

model posts {
  userid String @db.VarChar(255)
  user   users  @relation(fields: [userid], references: [userid])

  caption String    @db.VarChar(255)
  image   String?   @db.VarChar(255)
  plugins plugins[]

  type   Int
  postid String @id @unique @db.VarChar(255)

  upvotes   String[]
  downvotes String[]
  comments  comments[]
}

model botaudits {
  id    Int         @id @unique @default(autoincrement())
  botid String      @db.VarChar(255)
  bot   discordbots @relation(fields: [botid], references: [botid])

  staffid String    @db.VarChar(255)
  action  botaction
  reason  String    @db.VarChar(255)
}

model botcomments {
  commentid String @id @unique @db.VarChar(255)

  creatorid String @db.VarChar(255)
  user      users  @relation(fields: [creatorid], references: [userid])

  bot   discordbots @relation(fields: [botid], references: [botid])
  botid String      @db.VarChar(255)

  caption String  @db.VarChar(255)
  image   String? @db.VarChar(255)
}

model discordbots {
  botid           String    @id @unique @db.VarChar(255)
  name            String    @db.VarChar(255)
  description     String    @db.VarChar(255)
  longdescription String    @db.VarChar(255)
  status          botstatus

  state     botstate
  auditlogs botaudits[]

  upvotes   String[]
  downvotes String[]
  comments  botcomments[]

  ownerid String
  owner   users  @relation(fields: [ownerid], references: [userid])
}

model connections {
  id     String @id @unique @db.VarChar(255)
  userid String @db.VarChar(255)
  user   users  @relation(fields: [userid], references: [userid])

  service        String  @db.VarChar(255)
  serviceid      String  @db.VarChar(255)
  servicetoken   String? @db.VarChar(255)
  servicerefresh String? @db.VarChar(255)
}

model users {
  name    String? @db.VarChar(255)
  userid  String  @id @unique @db.VarChar(255)
  usertag String  @unique @db.VarChar(255)

  bio       String   @default("i exist now. yes.") @db.VarChar(255)
  avatar    String   @default("/logo.png") @db.VarChar(255)
  followers String[]
  following String[]
  badges    String[]

  staff_perms String[] @default([])

  discordbots discordbots[]
  botcomments botcomments[]

  connections  connections[]
  applications applications[]

  posts    posts[]
  comments comments[]
}

enum botstatus {
  ONLINE
  IDLE
  DND
  OFFLINE
}

enum botstate {
  APPROVED
  DENIED
  PENDING
  BANNED
}

enum botaction {
  APPROVE
  DENY
  BAN
  VOTE_BAN
  OTHER
}
